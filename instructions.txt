

* Conda

* Python 3.7 

  ```bash
  conda create -n g2p_app python=3.7
  conda activate g2p_app
	```

* You can quickly install/update these dependencies by running the following:

  ```bash
  conda install django opencv scipy pandas shapely
  conda install pytorch==1.3.1 torchvision -c pytorch
  ``` 
  **Note: there is a fatal error when using Matlab and pytorch<1.5.0 together on Linux. Please install the latest pytorch 1.5.0+ to use the interface and run post processing.**
		
* Matlab Python API (Matlab 2019a+ for python 3.7):
  Find the file "setup.py" in `<PATH_TO_MATLAB>/<VERSION>/extern/engines/python/` and run
  
  ```
  python setup.py install
	```


###  Run

* Process Data: Download RPLAN from [here](http://staff.ustc.edu.cn/~fuxm/projects/DeepLayout/index.html) and processe them using the [toolbox](https://github.com/zzilch/RPLAN-Toolbox) and scripts in `DataPreparation`. We provide pre-processed data here just for convenient to reproduce the result in our paper: http://vcc.tech/file/upload_file/Data/G2P/Data.7z

	unzip the data to this repository
	
	The upload boundary in the interface is under the folder Interface\static\Data\Img\
	
	**Note: Place the unzipped data in a folder with the same file name as the project code.**
* Run project:

  ```bash
  python manage.py runserver 0.0.0.0:8000
  ```
		
* Open browser: http://127.0.0.1:8000/home
			
	

# 2. Network & Post Processing
## 2.1. Network
### Requirements

Create a new environment for training.

  ```bash
  conda create -n g2p_train python=3.7
  conda activate g2p_train
  conda install django opencv scipy pandas
  conda install pytorch==1.3.1 torchvision==0.4.2 -c pytorch
  pip install tqdm tensorboardX pytorch-ignite==0.2.1
  ```

### Prepare data

**Data format**

  After getting the data introduced in the **Interface** part, you can find a compact dataset in `Network/data.mat`. It is extracted from [RPLAN](http://staff.ustc.edu.cn/~fuxm/projects/DeepLayout/index.html) using the [toolbox](https://github.com/zzilch/RPLAN-Toolbox).
  It can be read by Matlab via `load('data.mat','data')` or python via

  ```python
  import scipy.io as sio
  data = sio.loadmat('data.mat', squeeze_me=True, struct_as_record=False)['data']
  print(len(data)) # a data list
  ```

  Each one of the data item has following fields

  ```
  data_item
      - name: file name in RPLAN dataset
      - boundary: (x,y,dir,isNew), first two point indicate the front door
      - order: room order for visualization
      - rType: room categories
      - rBoundary: (x,y), boundary points for each room
      - gtBox: (y0,x0,y1,x1), left-top(in) and right-bottom(out) corner of a room, extracted directly from the RPLAN dataset
      - gtBoxNew: (x0,y0,x1,y1), extracted after filling the gap between rooms
      - rEdge: (u,v,r), room indices and relative position(u relative to v)
  ```

**Split data for training**

  Run the split script to get train/valid/test split of the data in `Network/data`

  ```bash
  python split.py
  ```

More details in DataPreparation folder.

### Train

  Run the trainning script and the experiment logs and outputs are saved in `experiment` (created automatically).

  ```bash
  # train + valid
  python train.py
  # testing evaluation
  python train.py --skip_train 1 
  ```

## 2.2. Post processing
The final output of the network is a raster floorplan image and one bounding box for each room (the refined one). An issue that may occur with the output boxes is that they may not be well-aligned and some boxes may overlap in certain regions. So we need some post processing.

### Requirements
The requirements of post processing are the same with the **Interface** part. **Matlab** is required to align room bounding boxes with the floorplan boundary.

### Test with network training data

Change the `model_path` to the path of trained model and `dataset_path` to the test split of the dataset in `PostProcessing/test.py`, and run 

```
python test.py
```
A floorplan image `test.png` will be generated.  

### Test with interface data

Get the data introduced in the **Interface** part, and run

```
python test_interface_data.py
```
A floorplan image `test_interface_data.png` will be generated.  

